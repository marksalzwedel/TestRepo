export const config = { runtime: 'edge' };

// Bump this any time you change behavior; we'll echo it in responses to confirm deploys.
const VERSION = 'handoff-v1';

const SYSTEM_PROMPT = `
You are CLC Chatbot for Christ Lutheran Church (Eden Prairie, MN).

SOURCES (STRICT):
• Logistics (service times, location, staff, events, ministries): ONLY use christlutheran.com.
• Theology/ethics/doctrine: ONLY use WELS materials (wels.net) and Wisconsin Lutheran Seminary essays (wisluthsem.org).
• If the answer is not clearly supported by those sources, reply EXACTLY:
"I’m not certain based on our sources. Would you like to chat with a person?"

GUARDRAILS:
• Never browse or rely on outside sources. Do not invent details or summarize from memory.
• Prefer short, careful answers; offer to "show details" if asked.
• Avoid partisan political opinions. Handle sensitive topics kindly.

FOOTER (always append):
"(Generated by ChatGPT; may contain occasional errors. For confirmation or pastoral care, please contact Christ Lutheran Church via christlutheran.com.)"
`.trim();

export default async function handler(req) {
  if (req.method !== 'POST') return new Response('Method Not Allowed', { status: 405 });
  try {
    const { text } = await req.json();
    if (!text || typeof text !== 'string') {
      return new Response(JSON.stringify({ error: 'Missing text' }), { status: 400 });
    }

    const ai = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        temperature: 0.2,
        messages: [
          { role: 'system', content: SYSTEM_PROMPT },
          { role: 'system', content: 'If sources are insufficient, use the refusal line verbatim. Do not improvise.' },
          { role: 'user', content: text }
        ]
      })
    });

    if (!ai.ok) {
      const details = await ai.text();
      return new Response(JSON.stringify({ error: 'OpenAI error', details, version: VERSION }), { status: 502 });
    }

    const data = await ai.json();
    const reply =
      data?.choices?.[0]?.message?.content?.trim()
      || 'I’m not certain based on our sources. Would you like to chat with a person?';

    // Detect refusal exactly (case-insensitive on the fixed phrase)
    const handoff = /i’m not certain based on our sources/i.test(reply);

    return new Response(
      JSON.stringify({ reply, handoff, version: VERSION }),
      { status: 200, headers: { 'Content-Type': 'application/json' } }
    );
  } catch (err) {
    return new Response(JSON.stringify({ error: 'Server error', version: VERSION }), { status: 500 });
  }
}

