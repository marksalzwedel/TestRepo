// api/clc-chat.js — CLC Chatbot with two local KB files (ClcInfo + Theology)
// Runtime: Node (Vercel root functions)
const fs = require('fs/promises');
const path = require('path');

const VERSION = 'kb-v2';
const INFO_PATH = path.join(process.cwd(), 'data', 'ClcInfo.md');
const THEO_PATH = path.join(process.cwd(), 'data', 'Theology.md');

// ---- tweak this to your exact custom refusal sentence (keep verbatim) ----
const REFUSAL_LINE = 'I’m not sure how to answer that. Would you like to chat with a person?';

// simple in-memory cache
let INFO_CACHE = null;
let THEO_CACHE = null;

async function loadFileCached(pth, setterRef) {
  if (setterRef.value !== null) return setterRef.value;
  try {
    const raw = await fs.readFile(pth, 'utf8');
    // safety trim (very generous)
    const maxChars = 80_000;
    setterRef.value = raw.length > maxChars ? raw.slice(0, maxChars) : raw;
  } catch {
    setterRef.value = null;
  }
  return setterRef.value;
}

async function loadInfo() { return loadFileCached(INFO_PATH, { get value(){return INFO_CACHE;}, set value(v){INFO_CACHE=v;} }); }
async function loadTheo() { return loadFileCached(THEO_PATH, { get value(){return THEO_CACHE;}, set value(v){THEO_CACHE=v;} }); }

const SYSTEM_PROMPT = `
You are the CLC Chatbot for Christ Lutheran Church (Eden Prairie, MN).

MISSION & SCOPE (STRICT)
• Logistics (service times, location/parking, staff, ministries, events): ONLY use christlutheran.com content and the provided “Context.”
• Theology/ethics/doctrine: ONLY use WELS materials (wels.net) and Wisconsin Lutheran Seminary essays (wisluthsem.org), or clearly marked doctrine in the provided “Context.”
• If the answer is not clearly supported by those sources, use the exact refusal line provided by the developer.

TONE & PASTORAL CARE
• Warm, welcoming, and kind. Plain language. Assume good intent.
• Default to concise 2–4 sentence answers. Offer: “I can share more details if you’d like.”
• For sensitive topics, be gentle and invite pastoral follow-up.

OPERATIONAL GUARDRAILS
• Never browse or rely on outside sources. Don’t invent details or summarize from memory.
• Benevolence/assistance: invite the person to use the contact form on christlutheran.com.
• Vendor solicitations: “Thanks for reaching out, we’re not seeking new professional services right now.”

FOOTER (always append):
"(Generated by ChatGPT; may contain occasional errors. For confirmation or pastoral care, please contact Christ Lutheran Church via christlutheran.com or click on the "Talk to a Human" button.)"
`.trim();

const STYLE_GUIDE = `
Style:
• Begin with a warm micro-greeting when appropriate (“Happy to help!” / “Thanks for asking.”).
• Answer directly first; then offer one optional next step (link or “would you like more details?”).
• Keep sentences short; avoid jargon; use “we” and “you” where natural.
`.trim();

const FEW_SHOT = [
  {
    role: 'system',
    content:
`Example Q: What time are services?
Example A: Happy to help! Our Sunday worship is at 9:30 AM. We’re at 16900 Main Street in Eden Prairie, and parking is on the west side. I can share more details if you’d like.`
  },
  {
    role: 'system',
    content:
`Example Q: Do you offer Sunday School?
Example A: Yes! Sunday School meets at 10:35 AM following worship during the school year. If you’re bringing kids, I can share check-in details.`
  }
];

module.exports = async function handler(req, res) {
  // GET = health/version check (also shows KB status)
  if (req.method === 'GET') {
    const info = await loadInfo();
    const theo = await loadTheo();
    return res.status(200).json({
      ok: true,
      version: VERSION,
      hasKey: Boolean(process.env.OPENAI_API_KEY),
      hasInfoKB: Boolean(info),
      hasTheoKB: Boolean(theo),
      infoBytes: info ? info.length : 0,
      theoBytes: theo ? theo.length : 0,
      node: process.version
    });
  }

  if (req.method !== 'POST') {
    return res.status(405).send('Method Not Allowed');
  }

  // Robust JSON body parsing
  let raw = '';
  await new Promise((resolve) => {
    req.on('data', (c) => (raw += c));
    req.on('end', resolve);
  });

  let text = '';
  try {
    const json = raw ? JSON.parse(raw) : (req.body || {});
    text = typeof json.text === 'string' ? json.text : '';
  } catch {
    return res.status(400).json({ error: 'Invalid JSON', version: VERSION });
  }
  if (!text) return res.status(400).json({ error: 'Missing text', version: VERSION });

  // Load KBs
  const info = await loadInfo();
  const theo = await loadTheo();

  // Build messages with both KBs (logistics first, then theology)
  const contextBlocks = [];
  if (info) {
    contextBlocks.push(
      "CONTEXT A — Congregation info (from data/ClcInfo.md):\n" + info
    );
  }
  if (theo) {
    contextBlocks.push(
      "CONTEXT B — Theology summaries (from data/Theology.md — WELS-aligned):\n" + theo
    );
  }

  const messages = [
    { role: 'system', content: SYSTEM_PROMPT },
    ...(contextBlocks.length ? [{
      role: 'system',
      content:
        contextBlocks.join("\n\n---\n\n") +
        "\n\nUse ONLY these contexts for logistics and doctrine. If the contexts do not contain the answer, use the refusal line."
    }] : []),
    { role: 'system', content: STYLE_GUIDE },
    ...FEW_SHOT,
    { role: 'system', content: `Use this exact refusal line when needed:\n${REFUSAL_LINE}` },
    { role: 'system', content: 'If sources/context are insufficient, use the refusal line verbatim. Do not improvise.' },
    { role: 'user', content: text }
  ];

  try {
    if (!process.env.OPENAI_API_KEY) {
      return res.status(500).json({ error: 'OPENAI_API_KEY is not set', version: VERSION });
    }

    const aiRes = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        temperature: 0.25,
        messages
      })
    });

    const textBody = await aiRes.text();
    if (!aiRes.ok) {
      return res.status(502).json({
        error: 'OpenAI error',
        status: aiRes.status,
        statusText: aiRes.statusText,
        body: textBody.slice(0, 1200),
        version: VERSION
      });
    }

    let data;
    try { data = JSON.parse(textBody); }
    catch {
      return res.status(500).json({ error: 'Failed to parse OpenAI JSON', body: textBody.slice(0, 1200), version: VERSION });
    }

    const reply =
      data?.choices?.[0]?.message?.content?.trim() ||
      REFUSAL_LINE;

    const handoff = new RegExp(REFUSAL_LINE.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'i').test(reply);

    return res.status(200).json({
      reply,
      handoff,
      version: VERSION,
      usedInfoKB: Boolean(info),
      usedTheoKB: Boolean(theo)
    });
  } catch (e) {
    return res.status(500).json({ error: 'Server error', details: String(e), version: VERSION });
  }
};
